info:
  title: API for Badapple databases
  description: |
    API which allows for programmatic access to badapple_classic and badapple2 databases.

    Please report any issues to https://github.com/unmtransinfo/Badapple2-API/issues
  version: 1
components:
  schemas:
    AssayID:
      type: integer
      description: PubChem AssayID
    ScaffoldID:
      type: integer
      description: ID of scaffold
    ScaffoldEntry:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ScaffoldID"
        in_db: { type: boolean, description: If scaffold was found in database }
        in_drug:
          {
            type: boolean,
            description: If scaffold is present in any approved drugs,
          }
        kekule_scafsmi:
          { type: string, description: Kekule SMILES for the scaffold }
        nass_active:
          {
            type: integer,
            description: Number of assays with active compounds containing scaffold,
          }
        nass_tested:
          {
            type: integer,
            description: Number of assays with tested compounds containing scaffold,
          }
        ncpd_active:
          {
            type: integer,
            description: Number of active compounds containing scaffold,
          }
        ncpd_tested:
          {
            type: integer,
            description: Number of tested compounds containing scaffold,
          }
        ncpd_total:
          {
            type: integer,
            description: Total number of compounds containing scaffold,
          }
        nsam_active:
          {
            type: integer,
            description: Number of active samples containing scaffold,
          }
        nsam_tested:
          {
            type: integer,
            description: Number of tested samples containing scaffold,
          }
        nsub_active:
          {
            type: integer,
            description: Number of active substances containing scaffold,
          }
        nsub_tested:
          {
            type: integer,
            description: Number of tested substances containing scaffold,
          }
        nsub_total:
          {
            type: integer,
            description: Total number of substances containing scaffold,
          }
        prank:
          {
            type: integer,
            description: Rank of pScore within database (ranks are ordered high->low),
          }
        pscore: { type: integer, description: Promiscuity Score (pScore) }
        scafsmi:
          {
            type: string,
            description: Canonical SMILES (from RDKit) for scaffold,
          }
        scaftree:
          { type: string, description: Tree with scaffoldID:(subScaffoldIDs) }
    CompoundID:
      type: integer
      description: PubChem CompoundID
    CompoundEntry:
      type: object
      properties:
        cansmi:
          {
            type: string,
            description: Canonical SMILES (from RDKit) for compound,
          }
        cid:
          $ref: "#/components/schemas/CompoundID"
        isosmi: { type: string, description: Isomeric SMILES for compound }
        nass_active:
          { type: integer, description: Number of assays where compound active }
        nass_tested:
          { type: integer, description: Number of assays where compound tested }
        nsam_active:
          {
            type: integer,
            description: Number of samples where compound active,
          }
        nsam_tested:
          {
            type: integer,
            description: Number of samples where compound tested,
          }
        nsub_active:
          { type: integer, description: Number of associated active substances }
        nsub_tested:
          { type: integer, description: Number of associated tested substances }
        nsub_total:
          {
            type: integer,
            description: Total number of associated substances (in the given database),
          }
    SubstanceID:
      type: integer
      description: PubChem SubstanceID
    DrugEntry:
      type: object
      properties:
        cansmi:
          type: string
          description: Canonical SMILES (from RDKit) of drug
        drug_id:
          type: integer
          description: DrugCentralID (https://drugcentral.org/)
        inn:
          type: string
          description: International Nonproprietary Name
  parameters:
    MaxRings:
      name: max_rings
      in: query
      type: integer
      required: false
      minimum: 1
      maximum: 10
      default: 5
      description: Ignore compounds with more than the specified number of ring systems (must be between 1 and 10).
    SMILESList:
      name: SMILES
      in: query
      type: array
      items:
        type: string
      required: true
      description: List of compound SMILES
    Names:
      name: Names
      in: query
      type: array
      items:
        type: string
      required: false
      description: List of compound names
    Database:
      name: database
      in: query
      type: string
      required: false
      description: Database to fetch information from
      enum: [badapple_classic, badapple2]
      default: badapple2
    Database2: # some functions are badapple2+ only
      name: database
      in: query
      type: string
      required: false
      description: Database to fetch information from
      enum: [badapple2]
      default: badapple2
    ScaffoldIDParam:
      name: scafid
      in: query
      required: true
      schema:
        $ref: "#/components/schemas/ScaffoldID"
    ScaffoldSMILES:
      name: SMILES
      in: query
      type: string
      required: true
      description: SMILES string representing scaffold
    CompoundIDs:
      name: CIDs
      in: query
      required: true
      type: array
      items:
        $ref: "#/components/schemas/CompoundID"
    SubstanceIDParam:
      name: SID
      in: query
      required: true
      schema:
        $ref: "#/components/schemas/SubstanceID"
  responses:
    ResponseCode400:
      description: Malformed request error
paths:
  /compound_search/get_associated_scaffolds:
    get:
      tags:
        - Compound Search
      summary: Get associated scaffolds and info on each.
      description: Returns a dictionary mapping all given compounds (SMILES) to their associated scaffolds with pScores and other information.
      parameters:
        - $ref: "#/components/parameters/SMILESList"
        - $ref: "#/components/parameters/MaxRings"
        - $ref: "#/components/parameters/Database"
      responses:
        200:
          description: A JSON object containing all compounds and their associated scaffolds with pScores and other information. If a scaffold is not present in the given database, then it will only contain the scafsmi and in_db=False.
          schema:
            type: object
            additionalProperties:
              type: array
              items:
                $ref: "#/components/schemas/ScaffoldEntry"
          examples:
            application/json:
              {
                "CN1C(=O)N(C)C(=O)C(N(C)C=N2)=C12":
                  [
                    {
                      "id": 534,
                      "in_db": true,
                      "in_drug": true,
                      "kekule_scafsmi": "O=C1NC(=O)C2=C(N=CN2)N1",
                      "nass_active": 623,
                      "nass_tested": 893,
                      "ncpd_active": 1865,
                      "ncpd_tested": 2374,
                      "ncpd_total": 2374,
                      "nsam_active": 7355,
                      "nsam_tested": 1426265,
                      "nsub_active": 2046,
                      "nsub_tested": 5096,
                      "nsub_total": 5096,
                      "prank": 2926,
                      "pscore": 84,
                      "scafsmi": "O=c1[nH]c(=O)c2[nH]cnc2[nH]1",
                      "scaftree": "534",
                    },
                  ],
                "COc1cc2c(ccnc2cc1)C(O)C4CC(CC3)C(C=C)CN34":
                  [
                    {
                      "id": 45947,
                      "in_db": true,
                      "in_drug": true,
                      "kekule_scafsmi": "C1=CC=C2C(CC3CC4CCN3CC4)=CC=NC2=C1",
                      "nass_active": 27,
                      "nass_tested": 756,
                      "ncpd_active": 22,
                      "ncpd_tested": 31,
                      "ncpd_total": 31,
                      "nsam_active": 66,
                      "nsam_tested": 8477,
                      "nsub_active": 29,
                      "nsub_tested": 71,
                      "nsub_total": 71,
                      "prank": 28398,
                      "pscore": 6,
                      "scafsmi": "c1ccc2c(CC3CC4CCN3CC4)ccnc2c1",
                      "scaftree": "45947:(8813,3)",
                    },
                    {
                      "id": 8813,
                      "in_db": true,
                      "in_drug": true,
                      "kekule_scafsmi": "C1CN2CCC1CC2",
                      "nass_active": 157,
                      "nass_tested": 882,
                      "ncpd_active": 91,
                      "ncpd_tested": 110,
                      "ncpd_total": 110,
                      "nsam_active": 495,
                      "nsam_tested": 48188,
                      "nsub_active": 106,
                      "nsub_tested": 237,
                      "nsub_total": 237,
                      "prank": 5920,
                      "pscore": 46,
                      "scafsmi": "C1CN2CCC1CC2",
                      "scaftree": "8813",
                    },
                    {
                      "id": 3,
                      "in_db": true,
                      "in_drug": true,
                      "kekule_scafsmi": "C1=CC=C2N=CC=CC2=C1",
                      "nass_active": 801,
                      "nass_tested": 902,
                      "ncpd_active": 6121,
                      "ncpd_tested": 6846,
                      "ncpd_total": 6846,
                      "nsam_active": 51121,
                      "nsam_tested": 3582098,
                      "nsub_active": 6713,
                      "nsub_tested": 11663,
                      "nsub_total": 11663,
                      "prank": 215,
                      "pscore": 428,
                      "scafsmi": "c1ccc2ncccc2c1",
                      "scaftree": "3",
                    },
                  ],
              }
        400:
          $ref: "#/components/responses/ResponseCode400"
  /compound_search/get_associated_scaffolds_ordered:
    get:
      tags:
        - Compound Search
      summary: Get associated scaffolds and info on each. Output is ordered to match input.
      description: Returns a JSON object containing all given compounds and their associated scaffolds with pScores and other information, maintaining input order.
      parameters:
        - $ref: "#/components/parameters/SMILESList"
        - $ref: "#/components/parameters/Names"
        - $ref: "#/components/parameters/MaxRings"
        - $ref: "#/components/parameters/Database"
      responses:
        200:
          description: A JSON object containing all given compounds and their associated scaffolds with pScores and other information. The data will be in the same order as the given list of SMILES/Names.
          schema:
            type: array
            items:
              type: object
              properties:
                molecule_smiles:
                  { type: string, description: SMILES of input compound }
                name: { type: string, description: Name of input compound }
                scaffolds:
                  type: array
                  items:
                    $ref: "#/components/schemas/ScaffoldEntry"
          examples:
            application/json:
              [
                {
                  "molecule_smiles": "CN1C(=O)N(C)C(=O)C(N(C)C=N2)=C12",
                  "name": "caffeine",
                  "scaffolds":
                    [
                      {
                        "id": 534,
                        "in_db": true,
                        "in_drug": true,
                        "kekule_scafsmi": "O=C1NC(=O)C2=C(N=CN2)N1",
                        "nass_active": 623,
                        "nass_tested": 893,
                        "ncpd_active": 1865,
                        "ncpd_tested": 2374,
                        "ncpd_total": 2374,
                        "nsam_active": 7355,
                        "nsam_tested": 1426265,
                        "nsub_active": 2046,
                        "nsub_tested": 5096,
                        "nsub_total": 5096,
                        "prank": 2926,
                        "pscore": 84,
                        "scafsmi": "O=c1[nH]c(=O)c2[nH]cnc2[nH]1",
                        "scaftree": "534",
                      },
                    ],
                },
                {
                  "molecule_smiles": "COc1cc2c(ccnc2cc1)C(O)C4CC(CC3)C(C=C)CN34",
                  "name": "quinine",
                  "scaffolds":
                    [
                      {
                        "id": 45947,
                        "in_db": true,
                        "in_drug": true,
                        "kekule_scafsmi": "C1=CC=C2C(CC3CC4CCN3CC4)=CC=NC2=C1",
                        "nass_active": 27,
                        "nass_tested": 756,
                        "ncpd_active": 22,
                        "ncpd_tested": 31,
                        "ncpd_total": 31,
                        "nsam_active": 66,
                        "nsam_tested": 8477,
                        "nsub_active": 29,
                        "nsub_tested": 71,
                        "nsub_total": 71,
                        "prank": 28398,
                        "pscore": 6,
                        "scafsmi": "c1ccc2c(CC3CC4CCN3CC4)ccnc2c1",
                        "scaftree": "45947:(8813,3)",
                      },
                      {
                        "id": 8813,
                        "in_db": true,
                        "in_drug": true,
                        "kekule_scafsmi": "C1CN2CCC1CC2",
                        "nass_active": 157,
                        "nass_tested": 882,
                        "ncpd_active": 91,
                        "ncpd_tested": 110,
                        "ncpd_total": 110,
                        "nsam_active": 495,
                        "nsam_tested": 48188,
                        "nsub_active": 106,
                        "nsub_tested": 237,
                        "nsub_total": 237,
                        "prank": 5920,
                        "pscore": 46,
                        "scafsmi": "C1CN2CCC1CC2",
                        "scaftree": "8813",
                      },
                      {
                        "id": 3,
                        "in_db": true,
                        "in_drug": true,
                        "kekule_scafsmi": "C1=CC=C2N=CC=CC2=C1",
                        "nass_active": 801,
                        "nass_tested": 902,
                        "ncpd_active": 6121,
                        "ncpd_tested": 6846,
                        "ncpd_total": 6846,
                        "nsam_active": 51121,
                        "nsam_tested": 3582098,
                        "nsub_active": 6713,
                        "nsub_tested": 11663,
                        "nsub_total": 11663,
                        "prank": 215,
                        "pscore": 428,
                        "scafsmi": "c1ccc2ncccc2c1",
                        "scaftree": "3",
                      },
                    ],
                },
              ]
        400:
          $ref: "#/components/responses/ResponseCode400"
  /compound_search/get_associated_substance_ids:
    get:
      tags:
        - Compound Search
      summary: Get the PubChem SubstanceIDs (SIDs) associated with the PubChem CompoundIDs (CIDs) in the given database.
      description: Returns a JSON object containing a list of dictionaries. Each dictionary contains a CID and its associated SIDs in the given database.
      parameters:
        - $ref: "#/components/parameters/CompoundIDs"
        - $ref: "#/components/parameters/Database"
      responses:
        200:
          description: A JSON object containing each CID mapped to its associated SIDs in the given database.
          schema:
            type: array
            items:
              type: object
              properties:
                CID:
                  $ref: "#/components/schemas/CompoundID"
                SIDs:
                  type: array
                  items:
                    $ref: "#components/schemas/SubstanceID"
          examples:
            application/json:
              [
                { "CID": 2125, "SIDs": [26719791, 49681811] },
                { "CID": 2141, "SIDs": [11532871] },
              ]
        400:
          $ref: "#/components/responses/ResponseCode400"
  /scaffold_search/get_scaffold_id:
    get:
      tags:
        - Scaffold Search
      summary: Get the scaffoldID corresponding to given SMILES.
      description: Returns a JSON object containg the scaffoldID (scafid) of the given scaffold using structural search. Will be null if scaffold not found in database. Note that the scaffoldID for the same scaffold can differ between databases.
      parameters:
        - $ref: "#/components/parameters/ScaffoldSMILES"
        - $ref: "#/components/parameters/Database"
      responses:
        200:
          description: A JSON object containing either the scafid or null if structure was not found.
          schema:
            $ref: "#/components/schemas/ScaffoldID"
          examples:
            application/json: 46
        400:
          $ref: "#/components/responses/ResponseCode400"
  /scaffold_search/get_scaffold_info:
    get:
      tags:
        - Scaffold Search
      summary: Get the pScore, inDrug, and other information for a given scaffold.
      description: Returns a JSON object containing the pScore, inDrug, and other information for the given scaffoldID. Will be null if the ID is not in the database.
      parameters:
        - $ref: "#/components/parameters/ScaffoldIDParam"
        - $ref: "#/components/parameters/Database"
      responses:
        200:
          description: A JSON object containing either the scafid or null if structure was not found.
          schema:
            $ref: "#/components/schemas/ScaffoldEntry"
          examples:
            application/json:
              {
                "id": 46,
                "in_drug": false,
                "kekule_scafsmi": "O=C(NC1=CC=C2N=CC=CC2=C1)C1=CC=C2OCOC2=C1",
                "nass_active": 48,
                "nass_tested": 832,
                "ncpd_active": 3,
                "ncpd_tested": 3,
                "ncpd_total": 3,
                "nsam_active": 59,
                "nsam_tested": 2258,
                "nsub_active": 3,
                "nsub_tested": 9,
                "nsub_total": 9,
                "prank": 14447,
                "pscore": 17,
                "scafsmi": "O=C(Nc1ccc2ncccc2c1)c1ccc2c(c1)OCO2",
                "scaftree": "46:(47,3)",
              }
        400:
          $ref: "#/components/responses/ResponseCode400"
  /scaffold_search/get_associated_compounds:
    get:
      tags:
        - Scaffold Search
      summary: Get associated PubChem compounds.
      description: Return all PubChem compounds in the given database known to be associated with the given scaffold, including statistics.
      parameters:
        - $ref: "#/components/parameters/ScaffoldIDParam"
        - $ref: "#/components/parameters/Database"
      responses:
        200:
          description: A JSON object containing the list of all PubChem compounds in the given database known to be associated with the given scaffold, including statistics.
          schema:
            type: array
            items:
              $ref: "#/components/schemas/CompoundEntry"
          examples:
            application/json:
              [
                {
                  "cansmi": "Cc1ccccc1N(C(=O)Cc1cccs1)C(C(=O)NCC1CCCO1)c1cccnc1",
                  "cid": 3216680,
                  "isosmi": "CC1=CC=CC=C1N(C(C2=CN=CC=C2)C(=O)NCC3CCCO3)C(=O)CC4=CC=CS4",
                  "nass_active": 0,
                  "nass_tested": 649,
                  "nsam_active": 0,
                  "nsam_tested": 651,
                  "nsub_active": 0,
                  "nsub_tested": 1,
                  "nsub_total": 2,
                },
                {
                  "cansmi": "O=C(NCC1CCCO1)C(c1cccnc1)N(C(=O)Cc1cccs1)c1ccccc1",
                  "cid": 3216679,
                  "isosmi": "C1CC(OC1)CNC(=O)C(C2=CN=CC=C2)N(C3=CC=CC=C3)C(=O)CC4=CC=CS4",
                  "nass_active": 7,
                  "nass_tested": 654,
                  "nsam_active": 7,
                  "nsam_tested": 656,
                  "nsub_active": 2,
                  "nsub_tested": 2,
                  "nsub_total": 2,
                },
              ]
        400:
          $ref: "#/components/responses/ResponseCode400"
  /scaffold_search/get_associated_assay_ids:
    get:
      tags:
        - Scaffold Search
      summary: Get associated PubChem AssayIDs.
      description: Return all PubChem AssayIDs in the given database known to be associated with the given scaffoldID.
      parameters:
        - $ref: "#/components/parameters/ScaffoldIDParam"
        - $ref: "#/components/parameters/Database"
      responses:
        200:
          description: A JSON object containing the list of PubChem AssayIDs associated with the scaffold.
          schema:
            type: array
            items:
              $ref: "#/components/schemas/AssayID"
          examples:
            application/json:
              [
                1345082,
                1345083,
                1347165,
                1347417,
                1645851,
                1671188,
                1671190,
                1671193,
                1671194,
              ]
        400:
          $ref: "#/components/responses/ResponseCode400"
  /scaffold_search/get_active_targets:
    get:
      tags:
        - Scaffold Search
      summary: Get PubChem AssayIDs where scaffold was in active substance(s) along with biological target information.
      description: Return the PubChem AssayIDs and corresponding biological targets where the given scaffoldID was present in an 'active' substance. Note that not all PubChem assay records have explicit target information.
      parameters:
        - $ref: "#/components/parameters/ScaffoldIDParam"
        - $ref: "#/components/parameters/Database2"
      responses:
        200:
          description: A JSON object containing a list of dictionaries. Each dictionary contains the AssayID (aid) and target information (if available)
          schema:
            type: array
            items:
              type: object
              properties:
                aid:
                  $ref: "#/components/schemas/AssayID"
                external_id:
                  type: string
                  description: External ID of target
                external_id_type:
                  type: string
                  description: Resource linked to external_id (either "UniProt", "NCBI", or "Other")
                name:
                  type: integer
                  description: Name of target
                protein_family:
                  type: string
                  description: Protein family information from Pharos (https://pharos.nih.gov/), if available
                target_id:
                  type: integer
                  description: Target ID (unique to Badapple database)
                taxonomy:
                  type: string
                  description: Target taxon from the NCBI Taxonomy Database
                taxonomy_id:
                  type: integer
                  description: Taxon ID from the NCBI Taxonomy Database
                type:
                  type: string
                  description: Target type (most commonly "Protein", but can also include "Gene", "Nucleotide", and "Pathway")
          examples:
            application/json:
              [
                {
                  "aid": 651658,
                  "external_id": "Q9HCT0",
                  "external_id_type": "UniProt",
                  "name": "Fibroblast growth factor 22",
                  "protein_family": null,
                  "target_id": 482,
                  "taxonomy": "Homo sapiens (human)",
                  "taxonomy_id": 9606,
                  "type": "Protein",
                },
                {
                  "aid": 1053197,
                  "external_id": "Q9HAT2",
                  "external_id_type": "UniProt",
                  "name": "Sialate O-acetylesterase",
                  "protein_family": "Enzyme",
                  "target_id": 543,
                  "taxonomy": "Homo sapiens (human)",
                  "taxonomy_id": 9606,
                  "type": "Protein",
                },
              ]
        400:
          $ref: "#/components/responses/ResponseCode400"
  /scaffold_search/get_associated_drugs:
    get:
      tags:
        - Scaffold Search
      summary: Get approved drugs associated with a given scaffold.
      description: Return list of approved drugs (DrugCentral IDs, SMILES, and INN) the given scaffold is present in.
      parameters:
        - $ref: "#/components/parameters/ScaffoldIDParam"
        - $ref: "#/components/parameters/Database2"
      responses:
        200:
          description: A JSON object containing a list of dictionaries. Each dictionary contains the DrugCentralID (drug_id), SMILES, and INN.
          schema:
            type: array
            items:
              $ref: "#/components/schemas/DrugEntry"
          examples:
            application/json:
              [
                {
                  "cansmi": "c1ccc2[nH]c(-c3cscn3)nc2c1",
                  "drug_id": 2621,
                  "inn": "thiabendazole",
                },
              ]
        400:
          $ref: "#/components/responses/ResponseCode400"
  /substance_search/get_assay_outcomes:
    get:
      tags:
        - Substance Search
      summary: Get PubChem AssayIDs and outcomes for a substance within the given database.
      description: Return a list of all PubChem AssayIDs associated with the PubChem SubstanceID (SID) in the given database, with outcomes.
      parameters:
        - $ref: "#/components/parameters/SubstanceIDParam"
        - $ref: "#/components/parameters/Database"
      responses:
        200:
          description: A JSON object containing a list of PubChem AssayIDs associated with the SID in the given database, with outcomes.
          schema:
            type: array
            items:
              type: object
              properties:
                aid:
                  $ref: "#/components/schemas/AssayID"
                outcome:
                  {
                    type: integer,
                    description: Outcome code (1 = inactive | 2 = active | 3 = inconclusive | 4 = unspecified | 5 = probe),
                  }
          examples:
            application/json:
              [
                { "aid": 1159524, "outcome": 1 },
                { "aid": 1053197, "outcome": 1 },
                { "aid": 743445, "outcome": 1 },
              ]
        400:
          $ref: "#/components/responses/ResponseCode400"
